/*
 * Thumbnails Api v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Knedlex.Roblox.Thumbnails.Api.Client.OpenAPIDateConverter;

namespace Knedlex.Roblox.Thumbnails.Api.Model
{
    /// <summary>
    /// RobloxThumbnailsApisModelsThumbnailBatchRequest
    /// </summary>
    [DataContract(Name = "Roblox.Thumbnails.Apis.Models.ThumbnailBatchRequest")]
    public partial class RobloxThumbnailsApisModelsThumbnailBatchRequest : IValidatableObject
    {
        /// <summary>
        /// The type of the thumbnails [&#39;Avatar&#39; &#x3D; 1, &#39;AvatarHeadShot&#39; &#x3D; 2, &#39;GameIcon&#39; &#x3D; 3, &#39;BadgeIcon&#39; &#x3D; 4, &#39;GameThumbnail&#39; &#x3D; 5, &#39;GamePass&#39; &#x3D; 6, &#39;Asset&#39; &#x3D; 7, &#39;BundleThumbnail&#39; &#x3D; 8, &#39;Outfit&#39; &#x3D; 9, &#39;GroupIcon&#39; &#x3D; 10, &#39;DeveloperProduct&#39; &#x3D; 11, &#39;AvatarBust&#39; &#x3D; 12, &#39;AutoGeneratedAsset&#39; &#x3D; 13, &#39;PlaceIcon&#39; &#x3D; 14, &#39;AutoGeneratedGameIcon&#39; &#x3D; 15, &#39;ForceAutoGeneratedGameIcon&#39; &#x3D; 16, &#39;Look&#39; &#x3D; 17]
        /// </summary>
        /// <value>The type of the thumbnails [&#39;Avatar&#39; &#x3D; 1, &#39;AvatarHeadShot&#39; &#x3D; 2, &#39;GameIcon&#39; &#x3D; 3, &#39;BadgeIcon&#39; &#x3D; 4, &#39;GameThumbnail&#39; &#x3D; 5, &#39;GamePass&#39; &#x3D; 6, &#39;Asset&#39; &#x3D; 7, &#39;BundleThumbnail&#39; &#x3D; 8, &#39;Outfit&#39; &#x3D; 9, &#39;GroupIcon&#39; &#x3D; 10, &#39;DeveloperProduct&#39; &#x3D; 11, &#39;AvatarBust&#39; &#x3D; 12, &#39;AutoGeneratedAsset&#39; &#x3D; 13, &#39;PlaceIcon&#39; &#x3D; 14, &#39;AutoGeneratedGameIcon&#39; &#x3D; 15, &#39;ForceAutoGeneratedGameIcon&#39; &#x3D; 16, &#39;Look&#39; &#x3D; 17]</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Avatar for value: Avatar
            /// </summary>
            [EnumMember(Value = "Avatar")]
            Avatar = 1,

            /// <summary>
            /// Enum AvatarHeadShot for value: AvatarHeadShot
            /// </summary>
            [EnumMember(Value = "AvatarHeadShot")]
            AvatarHeadShot = 2,

            /// <summary>
            /// Enum GameIcon for value: GameIcon
            /// </summary>
            [EnumMember(Value = "GameIcon")]
            GameIcon = 3,

            /// <summary>
            /// Enum BadgeIcon for value: BadgeIcon
            /// </summary>
            [EnumMember(Value = "BadgeIcon")]
            BadgeIcon = 4,

            /// <summary>
            /// Enum GameThumbnail for value: GameThumbnail
            /// </summary>
            [EnumMember(Value = "GameThumbnail")]
            GameThumbnail = 5,

            /// <summary>
            /// Enum GamePass for value: GamePass
            /// </summary>
            [EnumMember(Value = "GamePass")]
            GamePass = 6,

            /// <summary>
            /// Enum Asset for value: Asset
            /// </summary>
            [EnumMember(Value = "Asset")]
            Asset = 7,

            /// <summary>
            /// Enum BundleThumbnail for value: BundleThumbnail
            /// </summary>
            [EnumMember(Value = "BundleThumbnail")]
            BundleThumbnail = 8,

            /// <summary>
            /// Enum Outfit for value: Outfit
            /// </summary>
            [EnumMember(Value = "Outfit")]
            Outfit = 9,

            /// <summary>
            /// Enum GroupIcon for value: GroupIcon
            /// </summary>
            [EnumMember(Value = "GroupIcon")]
            GroupIcon = 10,

            /// <summary>
            /// Enum DeveloperProduct for value: DeveloperProduct
            /// </summary>
            [EnumMember(Value = "DeveloperProduct")]
            DeveloperProduct = 11,

            /// <summary>
            /// Enum AvatarBust for value: AvatarBust
            /// </summary>
            [EnumMember(Value = "AvatarBust")]
            AvatarBust = 12,

            /// <summary>
            /// Enum AutoGeneratedAsset for value: AutoGeneratedAsset
            /// </summary>
            [EnumMember(Value = "AutoGeneratedAsset")]
            AutoGeneratedAsset = 13,

            /// <summary>
            /// Enum PlaceIcon for value: PlaceIcon
            /// </summary>
            [EnumMember(Value = "PlaceIcon")]
            PlaceIcon = 14,

            /// <summary>
            /// Enum AutoGeneratedGameIcon for value: AutoGeneratedGameIcon
            /// </summary>
            [EnumMember(Value = "AutoGeneratedGameIcon")]
            AutoGeneratedGameIcon = 15,

            /// <summary>
            /// Enum ForceAutoGeneratedGameIcon for value: ForceAutoGeneratedGameIcon
            /// </summary>
            [EnumMember(Value = "ForceAutoGeneratedGameIcon")]
            ForceAutoGeneratedGameIcon = 16,

            /// <summary>
            /// Enum Look for value: Look
            /// </summary>
            [EnumMember(Value = "Look")]
            Look = 17
        }


        /// <summary>
        /// The type of the thumbnails [&#39;Avatar&#39; &#x3D; 1, &#39;AvatarHeadShot&#39; &#x3D; 2, &#39;GameIcon&#39; &#x3D; 3, &#39;BadgeIcon&#39; &#x3D; 4, &#39;GameThumbnail&#39; &#x3D; 5, &#39;GamePass&#39; &#x3D; 6, &#39;Asset&#39; &#x3D; 7, &#39;BundleThumbnail&#39; &#x3D; 8, &#39;Outfit&#39; &#x3D; 9, &#39;GroupIcon&#39; &#x3D; 10, &#39;DeveloperProduct&#39; &#x3D; 11, &#39;AvatarBust&#39; &#x3D; 12, &#39;AutoGeneratedAsset&#39; &#x3D; 13, &#39;PlaceIcon&#39; &#x3D; 14, &#39;AutoGeneratedGameIcon&#39; &#x3D; 15, &#39;ForceAutoGeneratedGameIcon&#39; &#x3D; 16, &#39;Look&#39; &#x3D; 17]
        /// </summary>
        /// <value>The type of the thumbnails [&#39;Avatar&#39; &#x3D; 1, &#39;AvatarHeadShot&#39; &#x3D; 2, &#39;GameIcon&#39; &#x3D; 3, &#39;BadgeIcon&#39; &#x3D; 4, &#39;GameThumbnail&#39; &#x3D; 5, &#39;GamePass&#39; &#x3D; 6, &#39;Asset&#39; &#x3D; 7, &#39;BundleThumbnail&#39; &#x3D; 8, &#39;Outfit&#39; &#x3D; 9, &#39;GroupIcon&#39; &#x3D; 10, &#39;DeveloperProduct&#39; &#x3D; 11, &#39;AvatarBust&#39; &#x3D; 12, &#39;AutoGeneratedAsset&#39; &#x3D; 13, &#39;PlaceIcon&#39; &#x3D; 14, &#39;AutoGeneratedGameIcon&#39; &#x3D; 15, &#39;ForceAutoGeneratedGameIcon&#39; &#x3D; 16, &#39;Look&#39; &#x3D; 17]</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RobloxThumbnailsApisModelsThumbnailBatchRequest" /> class.
        /// </summary>
        /// <param name="requestId">The request id. (Generated client side, used to represent the items in the request).</param>
        /// <param name="targetId">The thumbnail target id.</param>
        /// <param name="token">Alternative ase token used to identify a thumbnail.</param>
        /// <param name="alias">Alternative string used to identify a thumbnail  instead of targetId.</param>
        /// <param name="type">The type of the thumbnails [&#39;Avatar&#39; &#x3D; 1, &#39;AvatarHeadShot&#39; &#x3D; 2, &#39;GameIcon&#39; &#x3D; 3, &#39;BadgeIcon&#39; &#x3D; 4, &#39;GameThumbnail&#39; &#x3D; 5, &#39;GamePass&#39; &#x3D; 6, &#39;Asset&#39; &#x3D; 7, &#39;BundleThumbnail&#39; &#x3D; 8, &#39;Outfit&#39; &#x3D; 9, &#39;GroupIcon&#39; &#x3D; 10, &#39;DeveloperProduct&#39; &#x3D; 11, &#39;AvatarBust&#39; &#x3D; 12, &#39;AutoGeneratedAsset&#39; &#x3D; 13, &#39;PlaceIcon&#39; &#x3D; 14, &#39;AutoGeneratedGameIcon&#39; &#x3D; 15, &#39;ForceAutoGeneratedGameIcon&#39; &#x3D; 16, &#39;Look&#39; &#x3D; 17].</param>
        /// <param name="size">The thumbnail size.</param>
        /// <param name="format">The thumbnail format.</param>
        /// <param name="isCircular">Is the thumbnail circular shape.</param>
        public RobloxThumbnailsApisModelsThumbnailBatchRequest(string requestId = default(string), long targetId = default(long), string token = default(string), string alias = default(string), TypeEnum? type = default(TypeEnum?), string size = default(string), string format = default(string), bool isCircular = default(bool))
        {
            this.RequestId = requestId;
            this.TargetId = targetId;
            this.Token = token;
            this.Alias = alias;
            this.Type = type;
            this.Size = size;
            this.Format = format;
            this.IsCircular = isCircular;
        }

        /// <summary>
        /// The request id. (Generated client side, used to represent the items in the request)
        /// </summary>
        /// <value>The request id. (Generated client side, used to represent the items in the request)</value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// The thumbnail target id
        /// </summary>
        /// <value>The thumbnail target id</value>
        [DataMember(Name = "targetId", EmitDefaultValue = false)]
        public long TargetId { get; set; }

        /// <summary>
        /// Alternative ase token used to identify a thumbnail
        /// </summary>
        /// <value>Alternative ase token used to identify a thumbnail</value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Alternative string used to identify a thumbnail  instead of targetId
        /// </summary>
        /// <value>Alternative string used to identify a thumbnail  instead of targetId</value>
        [DataMember(Name = "alias", EmitDefaultValue = false)]
        public string Alias { get; set; }

        /// <summary>
        /// The thumbnail size
        /// </summary>
        /// <value>The thumbnail size</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public string Size { get; set; }

        /// <summary>
        /// The thumbnail format
        /// </summary>
        /// <value>The thumbnail format</value>
        [DataMember(Name = "format", EmitDefaultValue = false)]
        public string Format { get; set; }

        /// <summary>
        /// Is the thumbnail circular shape
        /// </summary>
        /// <value>Is the thumbnail circular shape</value>
        [DataMember(Name = "isCircular", EmitDefaultValue = true)]
        public bool IsCircular { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RobloxThumbnailsApisModelsThumbnailBatchRequest {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  TargetId: ").Append(TargetId).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  IsCircular: ").Append(IsCircular).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
