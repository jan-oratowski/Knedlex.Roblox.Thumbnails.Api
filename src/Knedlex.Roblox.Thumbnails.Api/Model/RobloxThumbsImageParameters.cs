/*
 * Thumbnails Api v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Knedlex.Roblox.Thumbnails.Api.Client.OpenAPIDateConverter;

namespace Knedlex.Roblox.Thumbnails.Api.Model
{
    /// <summary>
    /// RobloxThumbsImageParameters
    /// </summary>
    [DataContract(Name = "Roblox.Thumbs.ImageParameters")]
    public partial class RobloxThumbsImageParameters : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RobloxThumbsImageParameters" /> class.
        /// </summary>
        /// <param name="width">width.</param>
        /// <param name="height">height.</param>
        /// <param name="format">format.</param>
        /// <param name="isCircular">isCircular.</param>
        public RobloxThumbsImageParameters(int width = default(int), int height = default(int), string format = default(string), bool isCircular = default(bool))
        {
            this.Width = width;
            this.Height = height;
            this.Format = format;
            this.IsCircular = isCircular;
        }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name = "Width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name = "Height", EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name = "Format", EmitDefaultValue = false)]
        public string Format { get; set; }

        /// <summary>
        /// Gets or Sets IsCircular
        /// </summary>
        [DataMember(Name = "IsCircular", EmitDefaultValue = true)]
        public bool IsCircular { get; set; }

        /// <summary>
        /// Gets or Sets FileExtension
        /// </summary>
        [DataMember(Name = "FileExtension", EmitDefaultValue = false)]
        public string FileExtension { get; private set; }

        /// <summary>
        /// Returns false as FileExtension should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFileExtension()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets MimeType
        /// </summary>
        [DataMember(Name = "MimeType", EmitDefaultValue = false)]
        public string MimeType { get; private set; }

        /// <summary>
        /// Returns false as MimeType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMimeType()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RobloxThumbsImageParameters {\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  IsCircular: ").Append(IsCircular).Append("\n");
            sb.Append("  FileExtension: ").Append(FileExtension).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
