/*
 * Thumbnails Api v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Knedlex.Roblox.Thumbnails.Api.Client;
using Knedlex.Roblox.Thumbnails.Api.Model;

namespace Knedlex.Roblox.Thumbnails.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Thumbnails asset animated.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxWebResponsesThumbnailsThumbnailResponse</returns>
        RobloxWebResponsesThumbnailsThumbnailResponse V1AssetThumbnailAnimatedGet(long assetId, long? robloxPlaceId = default(long?), int operationIndex = 0);

        /// <summary>
        /// Thumbnails asset animated.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxWebResponsesThumbnailsThumbnailResponse</returns>
        ApiResponse<RobloxWebResponsesThumbnailsThumbnailResponse> V1AssetThumbnailAnimatedGetWithHttpInfo(long assetId, long? robloxPlaceId = default(long?), int operationIndex = 0);
        /// <summary>
        /// Thumbnails assets.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds">The asset ids.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="returnPolicy">Optional policy to use in selecting thumbnail to return (default &#x3D; PlaceHolder). (optional, default to PlaceHolder)</param>
        /// <param name="size">The thumbnail size, formatted widthxheight (optional, default to 30x30)</param>
        /// <param name="format">The thumbnail format (optional, default to Png)</param>
        /// <param name="isCircular">The circle thumbnail output parameter, true or false (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse</returns>
        RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse V1AssetsGet(List<long> assetIds, long? robloxPlaceId = default(long?), string returnPolicy = default(string), string size = default(string), string format = default(string), bool? isCircular = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Thumbnails assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds">The asset ids.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="returnPolicy">Optional policy to use in selecting thumbnail to return (default &#x3D; PlaceHolder). (optional, default to PlaceHolder)</param>
        /// <param name="size">The thumbnail size, formatted widthxheight (optional, default to 30x30)</param>
        /// <param name="format">The thumbnail format (optional, default to Png)</param>
        /// <param name="isCircular">The circle thumbnail output parameter, true or false (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse</returns>
        ApiResponse<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> V1AssetsGetWithHttpInfo(List<long> assetIds, long? robloxPlaceId = default(long?), string returnPolicy = default(string), string size = default(string), string format = default(string), bool? isCircular = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Thumbnails assets.
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxWebResponsesThumbnailsThumbnailResponse</returns>
        RobloxWebResponsesThumbnailsThumbnailResponse V1AssetsThumbnail3dGet(long assetId, long? robloxPlaceId = default(long?), int operationIndex = 0);

        /// <summary>
        /// Thumbnails assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxWebResponsesThumbnailsThumbnailResponse</returns>
        ApiResponse<RobloxWebResponsesThumbnailsThumbnailResponse> V1AssetsThumbnail3dGetWithHttpInfo(long assetId, long? robloxPlaceId = default(long?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Thumbnails asset animated.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxWebResponsesThumbnailsThumbnailResponse</returns>
        System.Threading.Tasks.Task<RobloxWebResponsesThumbnailsThumbnailResponse> V1AssetThumbnailAnimatedGetAsync(long assetId, long? robloxPlaceId = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Thumbnails asset animated.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxWebResponsesThumbnailsThumbnailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxWebResponsesThumbnailsThumbnailResponse>> V1AssetThumbnailAnimatedGetWithHttpInfoAsync(long assetId, long? robloxPlaceId = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Thumbnails assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds">The asset ids.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="returnPolicy">Optional policy to use in selecting thumbnail to return (default &#x3D; PlaceHolder). (optional, default to PlaceHolder)</param>
        /// <param name="size">The thumbnail size, formatted widthxheight (optional, default to 30x30)</param>
        /// <param name="format">The thumbnail format (optional, default to Png)</param>
        /// <param name="isCircular">The circle thumbnail output parameter, true or false (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse</returns>
        System.Threading.Tasks.Task<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> V1AssetsGetAsync(List<long> assetIds, long? robloxPlaceId = default(long?), string returnPolicy = default(string), string size = default(string), string format = default(string), bool? isCircular = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Thumbnails assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds">The asset ids.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="returnPolicy">Optional policy to use in selecting thumbnail to return (default &#x3D; PlaceHolder). (optional, default to PlaceHolder)</param>
        /// <param name="size">The thumbnail size, formatted widthxheight (optional, default to 30x30)</param>
        /// <param name="format">The thumbnail format (optional, default to Png)</param>
        /// <param name="isCircular">The circle thumbnail output parameter, true or false (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> V1AssetsGetWithHttpInfoAsync(List<long> assetIds, long? robloxPlaceId = default(long?), string returnPolicy = default(string), string size = default(string), string format = default(string), bool? isCircular = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Thumbnails assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxWebResponsesThumbnailsThumbnailResponse</returns>
        System.Threading.Tasks.Task<RobloxWebResponsesThumbnailsThumbnailResponse> V1AssetsThumbnail3dGetAsync(long assetId, long? robloxPlaceId = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Thumbnails assets.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxWebResponsesThumbnailsThumbnailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RobloxWebResponsesThumbnailsThumbnailResponse>> V1AssetsThumbnail3dGetWithHttpInfoAsync(long assetId, long? robloxPlaceId = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApi : IAssetsApiSync, IAssetsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssetsApi : IAssetsApi
    {
        private Knedlex.Roblox.Thumbnails.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetsApi(string basePath)
        {
            this.Configuration = Knedlex.Roblox.Thumbnails.Api.Client.Configuration.MergeConfigurations(
                Knedlex.Roblox.Thumbnails.Api.Client.GlobalConfiguration.Instance,
                new Knedlex.Roblox.Thumbnails.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Knedlex.Roblox.Thumbnails.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Knedlex.Roblox.Thumbnails.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Knedlex.Roblox.Thumbnails.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssetsApi(Knedlex.Roblox.Thumbnails.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Knedlex.Roblox.Thumbnails.Api.Client.Configuration.MergeConfigurations(
                Knedlex.Roblox.Thumbnails.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Knedlex.Roblox.Thumbnails.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Knedlex.Roblox.Thumbnails.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Knedlex.Roblox.Thumbnails.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AssetsApi(Knedlex.Roblox.Thumbnails.Api.Client.ISynchronousClient client, Knedlex.Roblox.Thumbnails.Api.Client.IAsynchronousClient asyncClient, Knedlex.Roblox.Thumbnails.Api.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Knedlex.Roblox.Thumbnails.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Knedlex.Roblox.Thumbnails.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Knedlex.Roblox.Thumbnails.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Knedlex.Roblox.Thumbnails.Api.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Knedlex.Roblox.Thumbnails.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Thumbnails asset animated. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxWebResponsesThumbnailsThumbnailResponse</returns>
        public RobloxWebResponsesThumbnailsThumbnailResponse V1AssetThumbnailAnimatedGet(long assetId, long? robloxPlaceId = default(long?), int operationIndex = 0)
        {
            Knedlex.Roblox.Thumbnails.Api.Client.ApiResponse<RobloxWebResponsesThumbnailsThumbnailResponse> localVarResponse = V1AssetThumbnailAnimatedGetWithHttpInfo(assetId, robloxPlaceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Thumbnails asset animated. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxWebResponsesThumbnailsThumbnailResponse</returns>
        public Knedlex.Roblox.Thumbnails.Api.Client.ApiResponse<RobloxWebResponsesThumbnailsThumbnailResponse> V1AssetThumbnailAnimatedGetWithHttpInfo(long assetId, long? robloxPlaceId = default(long?), int operationIndex = 0)
        {
            Knedlex.Roblox.Thumbnails.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Thumbnails.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.ParameterToMultiMap("", "assetId", assetId));
            if (robloxPlaceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Roblox-Place-Id", Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.ParameterToString(robloxPlaceId)); // header parameter
            }

            localVarRequestOptions.Operation = "AssetsApi.V1AssetThumbnailAnimatedGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RobloxWebResponsesThumbnailsThumbnailResponse>("/v1/asset-thumbnail-animated", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AssetThumbnailAnimatedGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Thumbnails asset animated. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxWebResponsesThumbnailsThumbnailResponse</returns>
        public async System.Threading.Tasks.Task<RobloxWebResponsesThumbnailsThumbnailResponse> V1AssetThumbnailAnimatedGetAsync(long assetId, long? robloxPlaceId = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Thumbnails.Api.Client.ApiResponse<RobloxWebResponsesThumbnailsThumbnailResponse> localVarResponse = await V1AssetThumbnailAnimatedGetWithHttpInfoAsync(assetId, robloxPlaceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Thumbnails asset animated. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxWebResponsesThumbnailsThumbnailResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Thumbnails.Api.Client.ApiResponse<RobloxWebResponsesThumbnailsThumbnailResponse>> V1AssetThumbnailAnimatedGetWithHttpInfoAsync(long assetId, long? robloxPlaceId = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Thumbnails.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Thumbnails.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.ParameterToMultiMap("", "assetId", assetId));
            if (robloxPlaceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Roblox-Place-Id", Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.ParameterToString(robloxPlaceId)); // header parameter
            }

            localVarRequestOptions.Operation = "AssetsApi.V1AssetThumbnailAnimatedGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RobloxWebResponsesThumbnailsThumbnailResponse>("/v1/asset-thumbnail-animated", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AssetThumbnailAnimatedGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Thumbnails assets. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds">The asset ids.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="returnPolicy">Optional policy to use in selecting thumbnail to return (default &#x3D; PlaceHolder). (optional, default to PlaceHolder)</param>
        /// <param name="size">The thumbnail size, formatted widthxheight (optional, default to 30x30)</param>
        /// <param name="format">The thumbnail format (optional, default to Png)</param>
        /// <param name="isCircular">The circle thumbnail output parameter, true or false (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse</returns>
        public RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse V1AssetsGet(List<long> assetIds, long? robloxPlaceId = default(long?), string returnPolicy = default(string), string size = default(string), string format = default(string), bool? isCircular = default(bool?), int operationIndex = 0)
        {
            Knedlex.Roblox.Thumbnails.Api.Client.ApiResponse<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> localVarResponse = V1AssetsGetWithHttpInfo(assetIds, robloxPlaceId, returnPolicy, size, format, isCircular);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Thumbnails assets. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds">The asset ids.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="returnPolicy">Optional policy to use in selecting thumbnail to return (default &#x3D; PlaceHolder). (optional, default to PlaceHolder)</param>
        /// <param name="size">The thumbnail size, formatted widthxheight (optional, default to 30x30)</param>
        /// <param name="format">The thumbnail format (optional, default to Png)</param>
        /// <param name="isCircular">The circle thumbnail output parameter, true or false (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse</returns>
        public Knedlex.Roblox.Thumbnails.Api.Client.ApiResponse<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> V1AssetsGetWithHttpInfo(List<long> assetIds, long? robloxPlaceId = default(long?), string returnPolicy = default(string), string size = default(string), string format = default(string), bool? isCircular = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'assetIds' is set
            if (assetIds == null)
            {
                throw new Knedlex.Roblox.Thumbnails.Api.Client.ApiException(400, "Missing required parameter 'assetIds' when calling AssetsApi->V1AssetsGet");
            }

            Knedlex.Roblox.Thumbnails.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Thumbnails.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.ParameterToMultiMap("csv", "assetIds", assetIds));
            if (returnPolicy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.ParameterToMultiMap("", "returnPolicy", returnPolicy));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (isCircular != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.ParameterToMultiMap("", "isCircular", isCircular));
            }
            if (robloxPlaceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Roblox-Place-Id", Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.ParameterToString(robloxPlaceId)); // header parameter
            }

            localVarRequestOptions.Operation = "AssetsApi.V1AssetsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>("/v1/assets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AssetsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Thumbnails assets. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds">The asset ids.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="returnPolicy">Optional policy to use in selecting thumbnail to return (default &#x3D; PlaceHolder). (optional, default to PlaceHolder)</param>
        /// <param name="size">The thumbnail size, formatted widthxheight (optional, default to 30x30)</param>
        /// <param name="format">The thumbnail format (optional, default to Png)</param>
        /// <param name="isCircular">The circle thumbnail output parameter, true or false (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse</returns>
        public async System.Threading.Tasks.Task<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> V1AssetsGetAsync(List<long> assetIds, long? robloxPlaceId = default(long?), string returnPolicy = default(string), string size = default(string), string format = default(string), bool? isCircular = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Thumbnails.Api.Client.ApiResponse<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse> localVarResponse = await V1AssetsGetWithHttpInfoAsync(assetIds, robloxPlaceId, returnPolicy, size, format, isCircular, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Thumbnails assets. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetIds">The asset ids.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="returnPolicy">Optional policy to use in selecting thumbnail to return (default &#x3D; PlaceHolder). (optional, default to PlaceHolder)</param>
        /// <param name="size">The thumbnail size, formatted widthxheight (optional, default to 30x30)</param>
        /// <param name="format">The thumbnail format (optional, default to Png)</param>
        /// <param name="isCircular">The circle thumbnail output parameter, true or false (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Thumbnails.Api.Client.ApiResponse<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>> V1AssetsGetWithHttpInfoAsync(List<long> assetIds, long? robloxPlaceId = default(long?), string returnPolicy = default(string), string size = default(string), string format = default(string), bool? isCircular = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetIds' is set
            if (assetIds == null)
            {
                throw new Knedlex.Roblox.Thumbnails.Api.Client.ApiException(400, "Missing required parameter 'assetIds' when calling AssetsApi->V1AssetsGet");
            }


            Knedlex.Roblox.Thumbnails.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Thumbnails.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.ParameterToMultiMap("csv", "assetIds", assetIds));
            if (returnPolicy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.ParameterToMultiMap("", "returnPolicy", returnPolicy));
            }
            if (size != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.ParameterToMultiMap("", "size", size));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }
            if (isCircular != null)
            {
                localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.ParameterToMultiMap("", "isCircular", isCircular));
            }
            if (robloxPlaceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Roblox-Place-Id", Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.ParameterToString(robloxPlaceId)); // header parameter
            }

            localVarRequestOptions.Operation = "AssetsApi.V1AssetsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RobloxWebWebAPIModelsApiArrayResponseRobloxWebResponsesThumbnailsThumbnailResponse>("/v1/assets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AssetsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Thumbnails assets. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RobloxWebResponsesThumbnailsThumbnailResponse</returns>
        public RobloxWebResponsesThumbnailsThumbnailResponse V1AssetsThumbnail3dGet(long assetId, long? robloxPlaceId = default(long?), int operationIndex = 0)
        {
            Knedlex.Roblox.Thumbnails.Api.Client.ApiResponse<RobloxWebResponsesThumbnailsThumbnailResponse> localVarResponse = V1AssetsThumbnail3dGetWithHttpInfo(assetId, robloxPlaceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Thumbnails assets. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RobloxWebResponsesThumbnailsThumbnailResponse</returns>
        public Knedlex.Roblox.Thumbnails.Api.Client.ApiResponse<RobloxWebResponsesThumbnailsThumbnailResponse> V1AssetsThumbnail3dGetWithHttpInfo(long assetId, long? robloxPlaceId = default(long?), int operationIndex = 0)
        {
            Knedlex.Roblox.Thumbnails.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Thumbnails.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.ParameterToMultiMap("", "assetId", assetId));
            if (robloxPlaceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Roblox-Place-Id", Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.ParameterToString(robloxPlaceId)); // header parameter
            }

            localVarRequestOptions.Operation = "AssetsApi.V1AssetsThumbnail3dGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RobloxWebResponsesThumbnailsThumbnailResponse>("/v1/assets-thumbnail-3d", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AssetsThumbnail3dGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Thumbnails assets. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RobloxWebResponsesThumbnailsThumbnailResponse</returns>
        public async System.Threading.Tasks.Task<RobloxWebResponsesThumbnailsThumbnailResponse> V1AssetsThumbnail3dGetAsync(long assetId, long? robloxPlaceId = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Knedlex.Roblox.Thumbnails.Api.Client.ApiResponse<RobloxWebResponsesThumbnailsThumbnailResponse> localVarResponse = await V1AssetsThumbnail3dGetWithHttpInfoAsync(assetId, robloxPlaceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Thumbnails assets. 
        /// </summary>
        /// <exception cref="Knedlex.Roblox.Thumbnails.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">The asset id.</param>
        /// <param name="robloxPlaceId">(optional) placeid (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RobloxWebResponsesThumbnailsThumbnailResponse)</returns>
        public async System.Threading.Tasks.Task<Knedlex.Roblox.Thumbnails.Api.Client.ApiResponse<RobloxWebResponsesThumbnailsThumbnailResponse>> V1AssetsThumbnail3dGetWithHttpInfoAsync(long assetId, long? robloxPlaceId = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Knedlex.Roblox.Thumbnails.Api.Client.RequestOptions localVarRequestOptions = new Knedlex.Roblox.Thumbnails.Api.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json"
            };

            var localVarContentType = Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.ParameterToMultiMap("", "assetId", assetId));
            if (robloxPlaceId != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Roblox-Place-Id", Knedlex.Roblox.Thumbnails.Api.Client.ClientUtils.ParameterToString(robloxPlaceId)); // header parameter
            }

            localVarRequestOptions.Operation = "AssetsApi.V1AssetsThumbnail3dGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RobloxWebResponsesThumbnailsThumbnailResponse>("/v1/assets-thumbnail-3d", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V1AssetsThumbnail3dGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
